// Code generated by MockGen. DO NOT EDIT.
// Source: api_helper.go

// Package ibmcloudsecrets is a generated GoMock package.
package ibmcloudsecrets

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logical "github.com/hashicorp/vault/sdk/logical"
)

// MockapiHelper is a mock of apiHelper interface.
type MockapiHelper struct {
	ctrl     *gomock.Controller
	recorder *MockapiHelperMockRecorder
}

// MockapiHelperMockRecorder is the mock recorder for MockapiHelper.
type MockapiHelperMockRecorder struct {
	mock *MockapiHelper
}

// NewMockapiHelper creates a new mock instance.
func NewMockapiHelper(ctrl *gomock.Controller) *MockapiHelper {
	mock := &MockapiHelper{ctrl: ctrl}
	mock.recorder = &MockapiHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiHelper) EXPECT() *MockapiHelperMockRecorder {
	return m.recorder
}

// AddServiceIDToAccessGroup mocks base method.
func (m *MockapiHelper) AddServiceIDToAccessGroup(iamToken, iamID, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceIDToAccessGroup", iamToken, iamID, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceIDToAccessGroup indicates an expected call of AddServiceIDToAccessGroup.
func (mr *MockapiHelperMockRecorder) AddServiceIDToAccessGroup(iamToken, iamID, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceIDToAccessGroup", reflect.TypeOf((*MockapiHelper)(nil).AddServiceIDToAccessGroup), iamToken, iamID, group)
}

// CheckServiceIDAccount mocks base method.
func (m *MockapiHelper) CheckServiceIDAccount(iamToken, identifier, accountID string) (*serviceIDv1Response, *logical.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceIDAccount", iamToken, identifier, accountID)
	ret0, _ := ret[0].(*serviceIDv1Response)
	ret1, _ := ret[1].(*logical.Response)
	return ret0, ret1
}

// CheckServiceIDAccount indicates an expected call of CheckServiceIDAccount.
func (mr *MockapiHelperMockRecorder) CheckServiceIDAccount(iamToken, identifier, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceIDAccount", reflect.TypeOf((*MockapiHelper)(nil).CheckServiceIDAccount), iamToken, identifier, accountID)
}

// Cleanup mocks base method.
func (m *MockapiHelper) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockapiHelperMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockapiHelper)(nil).Cleanup))
}

// CreateAPIKey mocks base method.
func (m *MockapiHelper) CreateAPIKey(iamToken, IAMid, accountID, name, description string) (*APIKeyV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", iamToken, IAMid, accountID, name, description)
	ret0, _ := ret[0].(*APIKeyV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockapiHelperMockRecorder) CreateAPIKey(iamToken, IAMid, accountID, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockapiHelper)(nil).CreateAPIKey), iamToken, IAMid, accountID, name, description)
}

// CreateCOSResourceKey mocks base method.
func (m *MockapiHelper) CreateCOSResourceKey(iamToken, cosInstanceGUID, roleName string) (string, string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCOSResourceKey", iamToken, cosInstanceGUID, roleName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// CreateCOSResourceKey indicates an expected call of CreateCOSResourceKey.
func (mr *MockapiHelperMockRecorder) CreateCOSResourceKey(iamToken, cosInstanceGUID, roleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCOSResourceKey", reflect.TypeOf((*MockapiHelper)(nil).CreateCOSResourceKey), iamToken, cosInstanceGUID, roleName)
}

// CreateServiceID mocks base method.
func (m *MockapiHelper) CreateServiceID(iamToken, accountID, roleName string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceID", iamToken, accountID, roleName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateServiceID indicates an expected call of CreateServiceID.
func (mr *MockapiHelperMockRecorder) CreateServiceID(iamToken, accountID, roleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceID", reflect.TypeOf((*MockapiHelper)(nil).CreateServiceID), iamToken, accountID, roleName)
}

// DeleteAPIKey mocks base method.
func (m *MockapiHelper) DeleteAPIKey(iamToken, apiKeyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", iamToken, apiKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockapiHelperMockRecorder) DeleteAPIKey(iamToken, apiKeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockapiHelper)(nil).DeleteAPIKey), iamToken, apiKeyID)
}

// DeleteCOSResourceKey mocks base method.
func (m *MockapiHelper) DeleteCOSResourceKey(iamToken, keyGUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCOSResourceKey", iamToken, keyGUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCOSResourceKey indicates an expected call of DeleteCOSResourceKey.
func (mr *MockapiHelperMockRecorder) DeleteCOSResourceKey(iamToken, keyGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCOSResourceKey", reflect.TypeOf((*MockapiHelper)(nil).DeleteCOSResourceKey), iamToken, keyGUID)
}

// DeletePolicy mocks base method.
func (m *MockapiHelper) DeletePolicy(iamToken, policyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", iamToken, policyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockapiHelperMockRecorder) DeletePolicy(iamToken, policyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockapiHelper)(nil).DeletePolicy), iamToken, policyID)
}

// DeleteServiceID mocks base method.
func (m *MockapiHelper) DeleteServiceID(iamToken, identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceID", iamToken, identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceID indicates an expected call of DeleteServiceID.
func (mr *MockapiHelperMockRecorder) DeleteServiceID(iamToken, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceID", reflect.TypeOf((*MockapiHelper)(nil).DeleteServiceID), iamToken, identifier)
}

// GetAPIKeyDetails mocks base method.
func (m *MockapiHelper) GetAPIKeyDetails(iamToken, apiKeyValue string) (*APIKeyDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyDetails", iamToken, apiKeyValue)
	ret0, _ := ret[0].(*APIKeyDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyDetails indicates an expected call of GetAPIKeyDetails.
func (mr *MockapiHelperMockRecorder) GetAPIKeyDetails(iamToken, apiKeyValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyDetails", reflect.TypeOf((*MockapiHelper)(nil).GetAPIKeyDetails), iamToken, apiKeyValue)
}

// GetPolicyIDs mocks base method.
func (m *MockapiHelper) GetPolicyIDs(iamToken, accountID, sourceIAMid string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyIDs", iamToken, accountID, sourceIAMid)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyIDs indicates an expected call of GetPolicyIDs.
func (mr *MockapiHelperMockRecorder) GetPolicyIDs(iamToken, accountID, sourceIAMid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyIDs", reflect.TypeOf((*MockapiHelper)(nil).GetPolicyIDs), iamToken, accountID, sourceIAMid)
}

// Init mocks base method.
func (m *MockapiHelper) Init(iamEndpoint, resourceControllerEndpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", iamEndpoint, resourceControllerEndpoint)
}

// Init indicates an expected call of Init.
func (mr *MockapiHelperMockRecorder) Init(iamEndpoint, resourceControllerEndpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockapiHelper)(nil).Init), iamEndpoint, resourceControllerEndpoint)
}

// ObtainToken mocks base method.
func (m *MockapiHelper) ObtainToken(apiKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainToken", apiKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainToken indicates an expected call of ObtainToken.
func (mr *MockapiHelperMockRecorder) ObtainToken(apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainToken", reflect.TypeOf((*MockapiHelper)(nil).ObtainToken), apiKey)
}

// VerifyAccessGroupExists mocks base method.
func (m *MockapiHelper) VerifyAccessGroupExists(iamToken, accessGroup, accountID string) *logical.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessGroupExists", iamToken, accessGroup, accountID)
	ret0, _ := ret[0].(*logical.Response)
	return ret0
}

// VerifyAccessGroupExists indicates an expected call of VerifyAccessGroupExists.
func (mr *MockapiHelperMockRecorder) VerifyAccessGroupExists(iamToken, accessGroup, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessGroupExists", reflect.TypeOf((*MockapiHelper)(nil).VerifyAccessGroupExists), iamToken, accessGroup, accountID)
}

// VerifyResourceInstanceExists mocks base method.
func (m *MockapiHelper) VerifyResourceInstanceExists(iamToken, resourceInstanceGUID string) *logical.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResourceInstanceExists", iamToken, resourceInstanceGUID)
	ret0, _ := ret[0].(*logical.Response)
	return ret0
}

// VerifyResourceInstanceExists indicates an expected call of VerifyResourceInstanceExists.
func (mr *MockapiHelperMockRecorder) VerifyResourceInstanceExists(iamToken, resourceInstanceGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResourceInstanceExists", reflect.TypeOf((*MockapiHelper)(nil).VerifyResourceInstanceExists), iamToken, resourceInstanceGUID)
}

// VerifyToken mocks base method.
func (m *MockapiHelper) VerifyToken(ctx context.Context, token string) (*tokenInfo, *logical.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(*tokenInfo)
	ret1, _ := ret[1].(*logical.Response)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockapiHelperMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockapiHelper)(nil).VerifyToken), ctx, token)
}
